'use client';\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\n\nimport { HeartVisualizationEngine, VisualizationConfig } from '@ekg-sim/heart-3d';\nimport { MedicalAnalysis } from '@ekg-sim/medical-types';\n\ninterface HeartVisualization3DProps {\n  medicalAnalysis: MedicalAnalysis;\n  visualizationConfig?: any;\n  isPlaying: boolean;\n  animationSpeed: number;\n  educationalHighlights?: string[];\n}\n\ninterface HeartSceneProps {\n  medicalAnalysis: MedicalAnalysis;\n  isPlaying: boolean;\n  animationSpeed: number;\n  onEngineReady: (engine: HeartVisualizationEngine) => void;\n}\n\n/**\n * 3D Heart Scene Component\n * Integrates the HeartVisualizationEngine with React Three Fiber\n */\nfunction HeartScene({ medicalAnalysis, isPlaying, animationSpeed, onEngineReady }: HeartSceneProps) {\n  const { gl, scene, camera } = useThree();\n  const engineRef = useRef<HeartVisualizationEngine | null>(null);\n  const [isEngineInitialized, setIsEngineInitialized] = useState(false);\n  \n  // Initialize visualization engine\n  useEffect(() => {\n    if (!gl.domElement || engineRef.current) return;\n    \n    console.log('Initializing Heart Visualization Engine...');\n    \n    const config: VisualizationConfig = {\n      canvas: gl.domElement,\n      quality: 'high',\n      targetFPS: 60,\n      performanceMonitoring: true\n    };\n    \n    try {\n      const engine = new HeartVisualizationEngine(config);\n      engineRef.current = engine;\n      \n      // Synchronize with medical data\n      const mockVisualConfig = {\n        animation_timing: {\n          cycle_duration_ms: medicalAnalysis.conduction_timing.cardiac_cycle_ms,\n          speed_multiplier: animationSpeed,\n          electrical_sequence: {\n            sa_activation: 0,\n            atrial_depolarization: 50,\n            av_conduction: medicalAnalysis.conduction_timing.sa_to_av_delay,\n            ventricular_depolarization: medicalAnalysis.conduction_timing.sa_to_av_delay + 50,\n            repolarization: medicalAnalysis.conduction_timing.cardiac_cycle_ms - 200\n          }\n        },\n        chamber_contraction: {\n          atrial_contraction_intensity: medicalAnalysis.chamber_coordination.atrial_contraction ? 0.6 : 0,\n          ventricular_contraction_intensity: 1.0,\n          wall_motion_pattern: 'normal'\n        },\n        rendering: {\n          quality_level: 'high',\n          target_fps: 60,\n          anti_aliasing: true,\n          shadows: true\n        }\n      } as any;\n      \n      engine.synchronizeWithMedicalData(medicalAnalysis, mockVisualConfig);\n      \n      setIsEngineInitialized(true);\n      onEngineReady(engine);\n      \n      console.log('Heart Visualization Engine initialized successfully');\n      \n    } catch (error) {\n      console.error('Failed to initialize Heart Visualization Engine:', error);\n    }\n    \n    return () => {\n      if (engineRef.current) {\n        engineRef.current.dispose();\n        engineRef.current = null;\n      }\n    };\n  }, [gl.domElement, medicalAnalysis, onEngineReady]);\n  \n  // Update animation state\n  useEffect(() => {\n    if (!engineRef.current) return;\n    \n    if (isPlaying) {\n      engineRef.current.play();\n    } else {\n      engineRef.current.pause();\n    }\n  }, [isPlaying]);\n  \n  // Update animation speed\n  useEffect(() => {\n    if (!engineRef.current) return;\n    engineRef.current.setAnimationSpeed(animationSpeed);\n  }, [animationSpeed]);\n  \n  // Render loop integration\n  useFrame((state, delta) => {\n    if (!engineRef.current || !isEngineInitialized) return;\n    \n    try {\n      engineRef.current.render();\n    } catch (error) {\n      console.error('Render error:', error);\n    }\n  });\n  \n  return (\n    <>\n      {/* Medical examination lighting */}\n      <ambientLight intensity={0.2} />\n      <directionalLight\n        position={[10, 10, 10]}\n        intensity={1.0}\n        castShadow\n        shadow-mapSize={[2048, 2048]}\n      />\n      <directionalLight\n        position={[-5, 5, 5]}\n        intensity={0.4}\n      />\n      <spotLight\n        position={[0, 15, 0]}\n        angle={Math.PI / 4}\n        penumbra={0.1}\n        intensity={0.8}\n        castShadow\n      />\n      \n      {/* Environment for reflections */}\n      <Environment preset=\"studio\" />\n      \n      {/* Placeholder heart geometry (engine will replace this) */}\n      {!isEngineInitialized && (\n        <mesh position={[0, 0, 0]}>\n          <boxGeometry args={[2, 3, 1.5]} />\n          <meshStandardMaterial color=\"#ff4444\" transparent opacity={0.8} />\n        </mesh>\n      )}\n    </>\n  );\n}\n\n/**\n * Main Heart Visualization Component\n */\nexport function HeartVisualization3D({\n  medicalAnalysis,\n  visualizationConfig,\n  isPlaying,\n  animationSpeed,\n  educationalHighlights = []\n}: HeartVisualization3DProps) {\n  const [engine, setEngine] = useState<HeartVisualizationEngine | null>(null);\n  const [performanceMetrics, setPerformanceMetrics] = useState({\n    fps: 60,\n    drawCalls: 0,\n    triangles: 0\n  });\n  const [currentViewpoint, setCurrentViewpoint] = useState('Anterior View');\n  const [showLabels, setShowLabels] = useState(false);\n  \n  const handleEngineReady = useCallback((newEngine: HeartVisualizationEngine) => {\n    setEngine(newEngine);\n  }, []);\n  \n  // Performance monitoring\n  useEffect(() => {\n    if (!engine) return;\n    \n    const interval = setInterval(() => {\n      const metrics = engine.getPerformanceMetrics();\n      setPerformanceMetrics(metrics);\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  }, [engine]);\n  \n  // Educational highlights\n  useEffect(() => {\n    if (!engine) return;\n    \n    // Clear previous highlights\n    engine.toggleLabels(); // Reset labels\n    \n    // Apply new highlights based on educational content\n    educationalHighlights.forEach(highlight => {\n      // This would highlight specific anatomical regions\n      console.log('Highlighting:', highlight);\n    });\n  }, [engine, educationalHighlights]);\n  \n  const handleViewpointChange = useCallback((viewpoint: string) => {\n    if (engine) {\n      engine.setViewpoint(viewpoint);\n      setCurrentViewpoint(viewpoint);\n    }\n  }, [engine]);\n  \n  const handleToggleLabels = useCallback(() => {\n    if (engine) {\n      engine.toggleLabels();\n      setShowLabels(!showLabels);\n    }\n  }, [engine, showLabels]);\n  \n  const handleToggleEKGOverlay = useCallback(() => {\n    if (engine) {\n      engine.toggleEKGOverlay();\n    }\n  }, [engine]);\n  \n  return (\n    <div className=\"relative w-full h-full bg-gradient-to-b from-slate-900 to-slate-800 rounded-lg overflow-hidden\">\n      {/* 3D Canvas */}\n      <Canvas\n        className=\"w-full h-full\"\n        dpr={[1, 2]}\n        gl={{ \n          antialias: true, \n          alpha: true,\n          powerPreference: 'high-performance'\n        }}\n        camera={{\n          position: [0, 5, 15],\n          fov: 45,\n          near: 0.1,\n          far: 1000\n        }}\n      >\n        <PerspectiveCamera makeDefault />\n        <OrbitControls\n          enableDamping\n          dampingFactor={0.05}\n          minDistance={5}\n          maxDistance={50}\n          maxPolarAngle={Math.PI}\n        />\n        \n        <HeartScene\n          medicalAnalysis={medicalAnalysis}\n          isPlaying={isPlaying}\n          animationSpeed={animationSpeed}\n          onEngineReady={handleEngineReady}\n        />\n      </Canvas>\n      \n      {/* Visualization Controls Overlay */}\n      <div className=\"absolute top-4 left-4 space-y-2\">\n        {/* Rhythm Information */}\n        <div className=\"bg-slate-800/80 backdrop-blur-sm rounded-lg px-3 py-2 text-sm\">\n          <div className=\"text-slate-300\">Rhythm:</div>\n          <div className=\"font-semibold text-blue-400\">\n            {medicalAnalysis.rhythm_classification.replace('_', ' ')}\n          </div>\n        </div>\n        \n        {/* Heart Rate */}\n        <div className=\"bg-slate-800/80 backdrop-blur-sm rounded-lg px-3 py-2 text-sm\">\n          <div className=\"text-slate-300\">Heart Rate:</div>\n          <div className=\"font-semibold text-green-400\">\n            {medicalAnalysis.heart_rate} BPM\n          </div>\n        </div>\n        \n        {/* Clinical Significance */}\n        <div className=\"bg-slate-800/80 backdrop-blur-sm rounded-lg px-3 py-2 text-sm\">\n          <div className=\"text-slate-300\">Significance:</div>\n          <div className={`font-semibold ${\n            medicalAnalysis.clinical_significance === 'critical' ? 'text-red-400' :\n            medicalAnalysis.clinical_significance === 'urgent' ? 'text-orange-400' :\n            medicalAnalysis.clinical_significance === 'monitor' ? 'text-yellow-400' :\n            'text-green-400'\n          }`}>\n            {medicalAnalysis.clinical_significance.toUpperCase()}\n          </div>\n        </div>\n      </div>\n      \n      {/* View Controls */}\n      <div className=\"absolute top-4 right-4 space-y-2\">\n        {engine?.getViewpoints().map((viewpoint) => (\n          <button\n            key={viewpoint.name}\n            onClick={() => handleViewpointChange(viewpoint.name)}\n            className={`block w-full px-3 py-2 text-sm rounded-lg transition-colors ${\n              currentViewpoint === viewpoint.name\n                ? 'bg-blue-600/80 text-white'\n                : 'bg-slate-800/80 text-slate-300 hover:bg-slate-700/80'\n            }`}\n            title={viewpoint.description}\n          >\n            {viewpoint.name}\n          </button>\n        ))}\n      </div>\n      \n      {/* Bottom Controls */}\n      <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={handleToggleLabels}\n            className={`px-3 py-2 text-sm rounded-lg transition-colors ${\n              showLabels\n                ? 'bg-blue-600/80 text-white'\n                : 'bg-slate-800/80 text-slate-300 hover:bg-slate-700/80'\n            }`}\n          >\n            Labels\n          </button>\n          \n          <button\n            onClick={handleToggleEKGOverlay}\n            className=\"px-3 py-2 text-sm rounded-lg bg-slate-800/80 text-slate-300 hover:bg-slate-700/80 transition-colors\"\n          >\n            EKG Overlay\n          </button>\n        </div>\n        \n        {/* Performance Metrics */}\n        <div className=\"bg-slate-800/80 backdrop-blur-sm rounded-lg px-3 py-2 text-xs text-slate-400\">\n          <div className=\"flex items-center space-x-4\">\n            <span>FPS: <span className=\"text-green-400\">{performanceMetrics.fps}</span></span>\n            <span>Calls: {performanceMetrics.drawCalls}</span>\n            <span>Triangles: {performanceMetrics.triangles.toLocaleString()}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Loading Indicator */}\n      {!engine && (\n        <div className=\"absolute inset-0 bg-slate-900/50 backdrop-blur-sm flex items-center justify-center\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-12 h-12 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin mx-auto\" />\n            <div>\n              <div className=\"text-lg font-semibold text-blue-400\">Initializing 3D Heart Model</div>\n              <div className=\"text-sm text-slate-400\">Loading anatomically accurate visualization...</div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Medical Warning Overlay */}\n      {medicalAnalysis.clinical_significance === 'critical' && (\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10\">\n          <div className=\"bg-red-600/90 backdrop-blur-sm rounded-lg px-6 py-4 text-center border border-red-500\">\n            <div className=\"text-lg font-bold text-white mb-2\">⚠️ CRITICAL RHYTHM</div>\n            <div className=\"text-red-200 text-sm\">\n              This rhythm requires immediate medical attention\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"