# Medical-Grade CI/CD Pipeline\n# Ensures clinical accuracy and safety before deployment\n\nname: Medical CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 2 * * *'  # Daily medical accuracy verification\n\nenv:\n  NODE_VERSION: '18'\n  PYTHON_VERSION: '3.11'\n  MEDICAL_VALIDATION_ENABLED: 'true'\n  CI_ENVIRONMENT: 'true'\n\njobs:\n  # Medical Safety Gate - Must pass before any other jobs\n  medical-safety-gate:\n    name: 🏥 Medical Safety Validation\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    outputs:\n      safety-passed: ${{ steps.safety-check.outputs.passed }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        \n      - name: Setup Python for medical validation\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          \n      - name: Install medical validation dependencies\n        run: |\n          pip install pytest pytest-cov\n          pip install -r requirements.txt\n          \n      - name: Run medical safety checks\n        id: safety-check\n        run: |\n          echo \"Running critical medical safety validation...\"\n          python .claude/hooks/medical-quality-assurance.py '{\"validation_type\": \"safety_check\"}'\n          echo \"passed=true\" >> $GITHUB_OUTPUT\n          \n      - name: Validate medical knowledge base\n        run: |\n          echo \"Validating medical knowledge consistency...\"\n          python scripts/validate-medical-knowledge.py\n          \n      - name: Check for dangerous classifications\n        run: |\n          echo \"Scanning for potential dangerous medical classifications...\"\n          python scripts/safety-scanner.py\n\n  # Code Quality and Type Safety\n  code-quality:\n    name: 🔍 Code Quality & Type Safety\n    runs-on: ubuntu-latest\n    needs: medical-safety-gate\n    if: needs.medical-safety-gate.outputs.safety-passed == 'true'\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Type checking\n        run: npm run typecheck\n        \n      - name: Lint code\n        run: npm run lint\n        \n      - name: Check code formatting\n        run: npm run format:check\n        \n      - name: Audit dependencies for medical security\n        run: |\n          npm audit --audit-level moderate\n          echo \"Checking for medical-specific security vulnerabilities...\"\n\n  # Medical Accuracy Testing\n  medical-accuracy-tests:\n    name: 🧬 Medical Accuracy Testing\n    runs-on: ubuntu-latest\n    needs: medical-safety-gate\n    if: needs.medical-safety-gate.outputs.safety-passed == 'true'\n    timeout-minutes: 30\n    strategy:\n      matrix:\n        test-suite:\n          - ekg-rhythm-classification\n          - conduction-timing-accuracy\n          - clinical-significance-validation\n          - educational-content-accuracy\n          - visualization-medical-sync\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Run medical accuracy tests\n        run: |\n          echo \"Running medical accuracy test suite: ${{ matrix.test-suite }}\"\n          npm test -- --testNamePattern=\"${{ matrix.test-suite }}\" --coverage\n          \n      - name: Validate medical accuracy threshold\n        run: |\n          echo \"Validating medical accuracy meets 95% threshold...\"\n          node scripts/validate-accuracy-threshold.js\n          \n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n        with:\n          flags: medical-accuracy-${{ matrix.test-suite }}\n\n  # 3D Visualization Testing\n  visualization-tests:\n    name: 🫀 3D Heart Visualization Tests\n    runs-on: ubuntu-latest\n    needs: medical-safety-gate\n    if: needs.medical-safety-gate.outputs.safety-passed == 'true'\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Setup virtual display for 3D testing\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y xvfb\n          \n      - name: Test 3D heart model accuracy\n        run: |\n          xvfb-run -a npm run test:3d\n          \n      - name: Validate medical synchronization\n        run: |\n          echo \"Testing EKG-to-3D synchronization accuracy...\"\n          xvfb-run -a npm run test:sync\n          \n      - name: Performance testing\n        run: |\n          echo \"Testing 3D rendering performance for medical use...\"\n          xvfb-run -a npm run test:performance\n\n  # Educational Content Validation\n  educational-validation:\n    name: 📚 Educational Content Validation\n    runs-on: ubuntu-latest\n    needs: medical-safety-gate\n    if: needs.medical-safety-gate.outputs.safety-passed == 'true'\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Validate educational content accuracy\n        run: |\n          echo \"Validating educational content medical accuracy...\"\n          npm run test:education\n          \n      - name: Test multi-level content generation\n        run: |\n          echo \"Testing beginner/intermediate/advanced content consistency...\"\n          npm run test:education:levels\n          \n      - name: Accessibility compliance testing\n        run: |\n          echo \"Testing educational content accessibility...\"\n          npm run test:accessibility\n\n  # Integration Testing\n  integration-tests:\n    name: 🔗 Integration Testing\n    runs-on: ubuntu-latest\n    needs: [medical-accuracy-tests, visualization-tests, educational-validation]\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: test_password\n          POSTGRES_DB: ekg_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          \n      - name: Setup Python for orchestrator\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n          \n      - name: Install dependencies\n        run: |\n          npm ci\n          pip install -r agents/orchestrator/requirements.txt\n          \n      - name: Setup test database\n        run: |\n          echo \"Setting up test database with medical schema...\"\n          npm run db:setup:test\n          \n      - name: Run end-to-end medical workflow tests\n        env:\n          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/ekg_test\n          REDIS_URL: redis://localhost:6379\n        run: |\n          echo \"Testing complete medical analysis pipeline...\"\n          npm run test:e2e:medical\n          \n      - name: Test multi-agent orchestration\n        run: |\n          echo \"Testing medical orchestrator coordination...\"\n          python -m pytest tests/test_orchestrator.py -v\n          \n      - name: Validate real-time synchronization\n        run: |\n          echo \"Testing real-time EKG-to-3D synchronization...\"\n          npm run test:realtime\n\n  # Security Scanning\n  security-scan:\n    name: 🔒 Security Scanning\n    runs-on: ubuntu-latest\n    needs: medical-safety-gate\n    if: needs.medical-safety-gate.outputs.safety-passed == 'true'\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Run Snyk security scan\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=medium\n          \n      - name: Medical data security audit\n        run: |\n          echo \"Scanning for medical data security vulnerabilities...\"\n          npm run security:medical\n          \n      - name: HIPAA compliance check\n        run: |\n          echo \"Validating HIPAA compliance patterns...\"\n          python scripts/hipaa-compliance-check.py\n\n  # Build and Deploy\n  build-and-deploy:\n    name: 🚀 Build and Deploy\n    runs-on: ubuntu-latest\n    needs: [code-quality, integration-tests, security-scan]\n    if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n    environment:\n      name: production\n      url: https://ekg-clinical-simulation.onrender.com\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Build production bundle\n        env:\n          NODE_ENV: production\n          MEDICAL_VALIDATION_ENABLED: 'true'\n        run: |\n          echo \"Building production bundle with medical validation...\"\n          npm run build\n          \n      - name: Run pre-deployment medical validation\n        run: |\n          echo \"Final medical validation before deployment...\"\n          npm run validate:pre-deploy\n          \n      - name: Deploy to Render\n        uses: johnbeynon/render-deploy-action@v0.0.8\n        with:\n          service-id: ${{ secrets.RENDER_SERVICE_ID }}\n          api-key: ${{ secrets.RENDER_API_KEY }}\n          \n      - name: Post-deployment health check\n        run: |\n          echo \"Waiting for deployment to be ready...\"\n          sleep 60\n          echo \"Running post-deployment health checks...\"\n          curl -f https://ekg-clinical-simulation.onrender.com/api/health\n          curl -f https://ekg-clinical-simulation.onrender.com/api/medical/health\n          \n      - name: Notify medical team\n        if: success()\n        uses: 8398a7/action-slack@v3\n        with:\n          status: success\n          text: '🏥 EKG Clinical Simulation deployed successfully with medical validation passed'\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.MEDICAL_TEAM_SLACK_WEBHOOK }}\n\n  # Post-deployment validation\n  post-deployment-validation:\n    name: ✅ Post-deployment Medical Validation\n    runs-on: ubuntu-latest\n    needs: build-and-deploy\n    if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n    steps:\n      - uses: actions/checkout@v4\n        \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          \n      - name: Run production medical accuracy tests\n        run: |\n          echo \"Testing medical accuracy in production environment...\"\n          npm run test:production:medical\n          \n      - name: Validate 3D visualization performance\n        run: |\n          echo \"Validating 3D visualization performance in production...\"\n          npm run test:production:3d\n          \n      - name: Test educational content generation\n        run: |\n          echo \"Testing educational content generation in production...\"\n          npm run test:production:education\n          \n      - name: Create medical validation report\n        run: |\n          echo \"Generating medical validation report...\"\n          npm run report:medical:production > medical-validation-report.md\n          \n      - name: Upload validation report\n        uses: actions/upload-artifact@v3\n        with:\n          name: medical-validation-report\n          path: medical-validation-report.md\n\n# Notification on failure\n  notify-failure:\n    name: 📢 Notify Medical Team on Failure\n    runs-on: ubuntu-latest\n    needs: [medical-safety-gate, medical-accuracy-tests, integration-tests, build-and-deploy]\n    if: failure()\n    steps:\n      - name: Notify medical team of CI failure\n        uses: 8398a7/action-slack@v3\n        with:\n          status: failure\n          text: '🚨 CRITICAL: EKG Clinical Simulation CI/CD failed - Medical validation issue detected'\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.MEDICAL_TEAM_SLACK_WEBHOOK }"